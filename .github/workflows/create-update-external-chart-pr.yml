name: Create Update External Chart PR

on:
  repository_dispatch:
    types: [update-chart]

jobs:
  update-external-chart:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    env:
      GCS_BUCKET: operator-charts
      PROJECT_ID: glassflow-dataforge
      SERVICE_ACCOUNT: 'github-ci-cd@glassflow-dataforge.iam.gserviceaccount.com'
      WORKLOAD_IDENTITY_PROVIDER: 'projects/585858172927/locations/global/workloadIdentityPools/github/providers/github-repo-provider'

    steps:
      - name: Checkout charts repo
        uses: actions/checkout@v5

      - name: Parse payload
        id: payload
        run: |
          echo "chart_name=${{ github.event.client_payload.chart_name }}" >> $GITHUB_OUTPUT
          echo "chart_version=${{ github.event.client_payload.chart_version }}" >> $GITHUB_OUTPUT
          echo "operator_version=${{ github.event.client_payload.operator_version }}" >> $GITHUB_OUTPUT
          echo "gs_url=${{ github.event.client_payload.gs_url }}" >> $GITHUB_OUTPUT
          echo "source_repo=${{ github.event.client_payload.source_repo }}" >> $GITHUB_OUTPUT

          CHART_FILENAME=$(echo "${{ github.event.client_payload.gs_url }}" | rev | cut -d'/' -f1 | rev)
          echo "chart_filename=${CHART_FILENAME}" >> $GITHUB_OUTPUT

          echo "📋 Payload parsed successfully:"
          echo "  Chart name: ${{ github.event.client_payload.chart_name }}"
          echo "  Chart version: ${{ github.event.client_payload.chart_version }}"
          echo "  Operator version: ${{ github.event.client_payload.operator_version }}"
          echo "  GCS URL: ${{ github.event.client_payload.gs_url }}"

      - name: Create release branch
        run: |
          git checkout -b "update-${{ steps.payload.outputs.chart_name }}-v${{ steps.payload.outputs.chart_version }}"

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          project_id: ${{ env.PROJECT_ID }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
        
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: '>= 363.0.0'
          project_id: ${{ env.PROJECT_ID }}

      - name: Download chart from GCS
        id: download-chart
        run: |
          # Download chart
          gsutil cp ${{ steps.payload.outputs.gs_url }} .

          # Verify download
          if [ ! -f "${{ steps.payload.outputs.chart_filename }}" ]; then
            echo "❌ Failed to download chart from GCS"
            exit 1
          fi
          
          # Check file size to ensure it's not empty
          FILE_SIZE=$(stat -c%s "${{ steps.payload.outputs.chart_filename }}" 2>/dev/null || stat -f%z "${{ steps.payload.outputs.chart_filename }}")
          if [ "$FILE_SIZE" -eq 0 ]; then
            echo "❌ Downloaded chart file is empty"
            exit 1
          fi
          
          echo "✅ Chart downloaded successfully (${FILE_SIZE} bytes)"

      - name: Clean up previous chart and extract new chart
        run: |
          # Clean previous chart
          echo "🧹 Cleaning up previous chart..."
          rm -rf charts/${{ steps.payload.outputs.chart_name }}/*
          
          # Create directory if it doesn't exist
          mkdir -p charts/${{ steps.payload.outputs.chart_name }}
          
          # Extract the chart
          echo "📦 Extracting chart..."
          tar -xzf "${{ steps.payload.outputs.chart_filename }}" -C charts/${{ steps.payload.outputs.chart_name }}/ --strip-components=1
          
          # Verify extraction
          if [ ! -f "charts/${{ steps.payload.outputs.chart_name }}/Chart.yaml" ]; then
            echo "❌ Chart extraction failed - Chart.yaml not found"
            exit 1
          fi
          
          echo "✅ Chart extracted successfully"
          
          # Clean up downloaded file
          rm "${{ steps.payload.outputs.chart_filename }}"

      - name: Validate extracted chart
        run: |
          echo "🔍 Validating extracted chart..."
          
          # Check if Chart.yaml exists and has correct version
          if [ -f "charts/${{ steps.payload.outputs.chart_name }}/Chart.yaml" ]; then
            CHART_VERSION=$(grep "^version:" charts/${{ steps.payload.outputs.chart_name }}/Chart.yaml | cut -d' ' -f2 | tr -d '"')
            APP_VERSION=$(grep "^appVersion:" charts/${{ steps.payload.outputs.chart_name }}/Chart.yaml | cut -d' ' -f2 | tr -d '"')
            
            echo "Chart version in Chart.yaml: $CHART_VERSION"
            echo "App version in Chart.yaml: $APP_VERSION"
            echo "Expected chart version: ${{ steps.payload.outputs.chart_version }}"
            echo "Expected operator version: ${{ steps.payload.outputs.operator_version }}"
            
            if [ "$CHART_VERSION" != "${{ steps.payload.outputs.chart_version }}" ]; then
              echo "⚠️  Warning: Chart version mismatch"
              exit 1
            fi
            
            if [ "$APP_VERSION" != "${{ steps.payload.outputs.operator_version }}" ]; then
              echo "⚠️  Warning: App version mismatch"
              exit 1
            fi
          else
            echo "❌ Chart.yaml not found"
            exit 1
          fi
          
          echo "✅ Chart validation completed"

      - name: Commit and push changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add changes
          git add charts/${{ steps.payload.outputs.chart_name }}
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "⚠️  No changes to commit"
            exit 0
          fi
          
          # Commit changes
          git commit -m "feat: update ${{ steps.payload.outputs.chart_name }} to v${{ steps.payload.outputs.chart_version }}

          - Chart version: ${{ steps.payload.outputs.chart_version }}
          - Operator version: ${{ steps.payload.outputs.operator_version }}
          - Source repository: ${{ steps.payload.outputs.source_repo }}
          - Downloaded from: ${{ steps.payload.outputs.gs_url }}"
          
          # Push the branch
          git push origin "update-${{ steps.payload.outputs.chart_name }}-v${{ steps.payload.outputs.chart_version }}"
          
          echo "✅ Changes committed and pushed successfully"

      - name: Create PR
        run: |
          echo "🔄 Creating pull request..."
          gh pr create \
            --title "feat: update ${{ steps.payload.outputs.chart_name }} to v${{ steps.payload.outputs.chart_version }}" \
            --body "Updates ${{ steps.payload.outputs.chart_name }} chart to version ${{ steps.payload.outputs.chart_version }}

          ### 📋 Details
          - **Chart Version**: ${{ steps.payload.outputs.chart_version }}
          - **Operator Version**: ${{ steps.payload.outputs.operator_version }}
          - **Source Repository**: ${{ steps.payload.outputs.source_repo }}
          - **Downloaded from**: ${{ steps.payload.outputs.gs_url }}

          ### 🔄 Changes
          - Chart package updated from GCS
          - Chart version bumped to ${{ steps.payload.outputs.chart_version }}
          - Operator dependencies updated to ${{ steps.payload.outputs.operator_version }}

          ### 📦 Source
          Chart downloaded from Google Cloud Storage and automatically extracted.
          
          ---
          *This PR was automatically created by the chart update workflow.*" \
            --base ${{ github.ref_name }} \
            --head "update-${{ steps.payload.outputs.chart_name }}-v${{ steps.payload.outputs.chart_version }}"
          
          echo "✅ Pull request created successfully"