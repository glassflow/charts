# Default values for glassflow-etl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global: 
  # Global image registry
  imageRegistry: ""
  # Global image pull secrets
  imagePullSecrets: []
  # Global storage class
  storageClass: ""

# API settings
api:
  replicas: 1

  image:
    repository: ghcr.io/glassflow/glassflow-etl-be
    tag: glassflow-cloud
    pullPolicy: Always
  
  resources:
    requests:
      memory: "1Gi"
      cpu: "500m"
    limits:
      memory: "2Gi"
      cpu: "750m"
  
  # API specific settings
  config:
    # Add your API specific configuration here
    logLevel: "DEBUG"  # or "INFO", "WARN", "ERROR", etc.
    environment: "production"

# UI settings
ui:
  replicas: 1

  image:
    repository: ghcr.io/glassflow/glassflow-etl-fe
    tag: glassflow-cloud
    pullPolicy: Always
  
  resources:
    requests:
      memory: "512Mi"
      cpu: "100m"
    limits:
      memory: "1Gi"
      cpu: "200m"

# Operator settings
operator:
  replicas: 1

  manager:
    image:
      repository: ghcr.io/glassflow/glassflow-etl-k8s-operator
      tag: main
      pullPolicy: Always

    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi

  # Pass through NATS configuration, you can ignore this if nats.enabled is true
  nats:
    # Service name for NATS deployment
    # Defaults to glassflow-etl-nats
    serviceName: ""

    # Namespace for NATS deployment
    # Defaults to the namespace of the ETL chart
    namespace: ""
  
  # Metrics service for the operator
  metricsService:
    ports:
    - name: https
      port: 8443
      protocol: TCP
      targetPort: 8443
    type: ClusterIP

# NATS configuration
nats:
  enabled: true
  # Node selector for NATS should be set under podTemplate.merge.spec.nodeSelector  
  config:
    cluster:
      enabled: true
      port: 6222
      # must be 2 or higher when jetstream is enabled
      replicas: 3 
    jetstream:
      enabled: true
      memoryStore:
        enabled: false
        maxSize: 1Gi
      fileStore:
        enabled: true
        dir: /data
        pvc:
          enabled: true
          size: 100Gi
          storageClassName: ""
    
    resources:
      requests:
        memory: "2Gi"
        cpu: "500m"
      limits:
        memory: "4Gi"
        cpu: "1000m"

# Service configuration
service:
  type: ClusterIP
  port: 80

# Ingress configuration
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  hosts: []
  tls: []

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations and labels
podAnnotations: {}
podLabels: {}

# Node selector for main application pods (UI and app)
nodeSelector: {}
# Example:
# nodeSelector:
#   kubernetes.io/os: linux
#   node-role.kubernetes.io/worker: "true"

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volume mounts
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
